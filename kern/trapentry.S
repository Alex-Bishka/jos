/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
.text									\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps
.data									
	.long name
	.long num
	.long 0
	.long 1
/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
.text									\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps
.data
	.long name
	.long num
	.long 0
	.long 1

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 *		Trap numbers come from trap.h - do we use these two?
 *		#define T_COPROC  9 reserved (not generated by recent processors)
 *	 	#define T_RES    15 reserved (or T_DEFAULT aka catchall for unknown?)
 *		do not touch since reserved?
 */
	.globl traphandlers

traphandlers:
TRAPHANDLER_NOEC(DivideError, T_DIVIDE);
TRAPHANDLER_NOEC(NonMaskableInterrupt, T_NMI);
TRAPHANDLER_NOEC(Breakpoint, T_BRKPT);
TRAPHANDLER_NOEC(Overflow, T_OFLOW);
TRAPHANDLER_NOEC(BOUNDRangeExceeded, T_BOUND);
TRAPHANDLER_NOEC(InvalidOpCode, T_ILLOP);
TRAPHANDLER_NOEC(DeviceNotAvailable, T_DEVICE);
TRAPHANDLER(DoubleFault, T_DBLFLT);
TRAPHANDLER(InvalidTSS, T_TSS);
TRAPHANDLER(SegmentNotPresent, T_SEGNP);
TRAPHANDLER(StackFault, T_STACK);
TRAPHANDLER(GeneralProtection, T_GPFLT);
TRAPHANDLER(PageFault, T_PGFLT);
TRAPHANDLER_NOEC(x87FPUFloatingPointError, T_FPERR);
TRAPHANDLER_NOEC(AlignmentCheck, T_ALIGN);
TRAPHANDLER_NOEC(MachineCheck, T_MCHK);
TRAPHANDLER_NOEC(SIMDFloatingPointException, T_SIMDERR);
.data
	.long 0
	.long 0
	.long 0
	.long 0
/*
 * Lab 3: Your code here for _alltraps
 */
.text
_alltraps:
	pushl %ds;
	pushl %es;
	pushal;
	pushl $GD_KD;
	popl %ds;
	pushl $GD_KD;
	popl %es;
	pushl %esp;
	call trap;

